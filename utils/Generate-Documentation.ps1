Import-Module $PSScriptRoot/../src/common/00-Environment.psm1;
Invoke-RunMain $PSCmdlet {
    $PSDefaultParameterValues['*:ErrorAction'] = 'Stop';

    Set-StrictMode -Version Latest;
    Push-Location -Path $PSScriptRoot;
    Invoke-EnsureModule -Modules @('Alt3.Docusaurus.Powershell', 'PlatyPS');

    # -----------------------------------------------------------------------------
    # Use below settings to manipulate the rendered MDX files
    # -----------------------------------------------------------------------------
    $Local:DocusaurusOptions = @{
        DocsFolder      = '../docs/docs'
        EditUrl         = ''
        Exclude         = @()
        MetaDescription = 'Help page for the "%1" command'
        MetaKeywords    = @('PowerShell', 'Help', 'Documentation')
    }

    Invoke-Info 'Removing existing MDX files';
    $Local:OutputFolder = Join-Path -Path $Local:DocusaurusOptions.DocsFolder -ChildPath ('modules' | Join-Path -ChildPath '*.*');
    if (Test-Path -Path $Local:OutputFolder) {
        Remove-Item -Path $Local:OutputFolder;
    }
    $Local:OutputFolder = Join-Path -Path $Local:DocusaurusOptions.DocsFolder -ChildPath ('scripts' | Join-Path -ChildPath '*.*');
    if (Test-Path -Path $Local:OutputFolder) {
        Remove-Item -Path $Local:OutputFolder;
    }

    # -----------------------------------------------------------------------------
    # Generate the new MDX Files for each module
    # -----------------------------------------------------------------------------
    $Local:Modules = Get-ChildItem -Path '../src/' -Include '*.psm1' -File -Recurse | ForEach-Object { $_ } | Sort-Object;
    foreach ($Local:Module in $Local:Modules) {
        $Local:ModuleDocusaurusOptions = $Local:DocusaurusOptions.Clone();
        $Local:ModuleDocusaurusOptions.Module = $Local:Module.BaseName;

        $Local:Parents = $Local:Module.DirectoryName.Split('\src\')[1];
        $Local:ModuleDocusaurusOptions.SideBar = "modules/$Local:Parents/$($Local:Module.BaseName)";

        Invoke-Info "Generating new MDX files for module: $($Local:Module.BaseName) in $Local:Parents";
        try {
            New-DocusaurusHelp @Local:ModuleDocusaurusOptions;
        }
        catch {
            Invoke-Error "Failed to generate MDX files for module: $($Local:Module.BaseName) in $Local:Parents";
        }

        Invoke-Info 'Render completed successfully';
    }

    # -----------------------------------------------------------------------------
    # Generate the new MDX Files for each script
    # -----------------------------------------------------------------------------
    $Local:Scripts = Get-ChildItem -Path '../src/' -Include '*.ps1' -File -Recurse | ForEach-Object { $_ } | Sort-Object;
    foreach ($Local:Script in $Local:Scripts) {
        $Local:ScriptDocusaurusOptions = $Local:DocusaurusOptions.Clone();
        $Local:ScriptDocusaurusOptions.Module = $Local:Script.BaseName;

        $Local:Parents = $Local:Script.DirectoryName.Split('\src\')[1];
        $Local:ScriptDocusaurusOptions.SideBar = "scripts/$Local:Parents/$($Local:Script.BaseName)";

        Invoke-Info "Generating new MDX files for script: $($Local:Script.BaseName) in $Local:Parents";
        try {
            New-DocusaurusHelp @Local:ScriptDocusaurusOptions;
        }
        catch {
            Invoke-Error "Failed to generate MDX files for script: $($Local:Script.BaseName) in $Local:Parents";
        }

        Invoke-Info 'Render completed successfully';
    }

    # -----------------------------------------------------------------------------
    # Generate the Sidebar file
    # -----------------------------------------------------------------------------
    $Local:Sidebar = '../docs/sidebars.js';
    @'
// @ts-check

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  ModulesSidebar: [{type: 'autogenerated', dirName: 'modules'}],
  ScriptsSidebar: [{type: 'autogenerated', dirName: 'scripts'}],
};

export default sidebars;

'@ | Set-Content -Path $Local:Sidebar -Force;

    Pop-Location;
}
